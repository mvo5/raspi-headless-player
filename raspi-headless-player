#!/usr/bin/python

import curses
import fnmatch
import logging
import os
import shutil
import subprocess
import sys
import tempfile

from gi.repository import (
    GLib,
    GObject,
    Gst,
    GUdev,
)
GObject.threads_init()
Gst.init(None)

# FIXME: hardcoded
BASEDIR = "/usr/share/raspi-headless-player/"
LANGUAGE = "de"


# COMPAT only, once a new gudev is available we can use
#        device.get_parent()
def get_parent(device):
    client = GUdev.Client()
    path = device.get_sysfs_path()
    path = os.path.abspath(os.path.join(path, ".."))
    device = client.query_by_sysfs_path(path)
    return device


# COMPAT only, once a new gudev is available we can use
#        device.get_parent_with_subsystem()
def get_parent_with_subsystem(device, subsystem, unused_really):
    client = GUdev.Client()
    path = device.get_sysfs_path()
    while True:
        path = os.path.abspath(os.path.join(path, ".."))
        if path == "/sys":
            return None
        device = client.query_by_sysfs_path(path)
        if device and device.get_subsystem() == subsystem:
            return device


def debug_device(device):
    for key in device.get_property_keys():
        print "  %s: %s" % (key, device.get_property(key))


def filter_by_subsystem(udev_client, subsystem, filterfunc):
    return [dev.get_device_file()
            for dev in udev_client.query_by_subsystem(subsystem)
            if filterfunc(dev)]


def find_removable_media(udev_client):
    def detect(block):
        # single device, no partition
        if block.get_sysfs_attr_as_int("removable"):
            return True
        # device with partitions
        return (get_parent(block) and
                # get "removable" property is part of the parent device,
                # not the partition
                get_parent(block).get_sysfs_attr_as_int("removable"))
    return filter_by_subsystem(udev_client, "block", detect)


def get_mount_path_for_devname(devname):
    for line in open("/etc/mtab"):
        dev = line.split()[0]
        path = line.split()[1]
        if dev == devname:
            return path
    return None


def mount_removable_medium(client):
    """ find and mount if needed """
    removables = find_removable_media(client)
    if len(removables) != 1:
        logging.debug("Expected 1 removable media, found %i" % len(removables))
        return None, None
    mount_point = get_mount_path_for_devname(removables[0])
    if not mount_point:
        mount_point = tempfile.mkdtemp()
        subprocess.check_call([
            "mount", "-o", "sync", removables[0], mount_point])
    return removables[0], mount_point


def find_all_titles(mount_point):
    all_media = []
    for dirpath, dirnames, filenames in os.walk(mount_point):
        for ext in ("*.mp3", "*.ogg"):
            media_files = fnmatch.filter(filenames, ext)
            all_media.extend([os.path.join(dirpath, f) for f in media_files])
    return sorted(all_media)


class CursesUI(GObject.GObject):

    __gsignals__ = {
        'key': (GObject.SIGNAL_RUN_FIRST, None,
                (int,))
    }

    def __init__(self):
        super(CursesUI, self).__init__()
        self.current_index = -1
        self.screen = curses.initscr()
        curses.noecho()
        curses.cbreak()
        self.screen.keypad(True)
        GLib.io_add_watch(sys.stdin, GLib.IO_IN, self.io_callback)

    def io_callback(self, fd, condition):
        key = self.screen.getch()
        self.emit("key", key)
        return True

    def set_playlist(self, all_titles, start_from):
        self.all_titles = all_titles
        self.playing_index = start_from
        self._render()

    def set_playing(self, track_index):
        self.current_index = track_index
        self._render()

    def _render(self):
        self.screen.clear()
        start = max(self.current_index - 1, 0)
        # FIXME: terminal size hardcoded
        end = start+24
        j = 1
        for i in range(start, end):
            try:
                title = self.all_titles[i]
            except IndexError:
                break
            if i == self.current_index:
                attr = curses.A_BOLD
            else:
                attr = 0
            self.screen.addstr(j, 0, "{}".format(title[-78:]), attr)
            j += 1
        self.screen.refresh()


class GstPlayer(GObject.GObject):

    NANO_SEC = 1000000000

    __gsignals__ = {
        'playing': (GObject.SIGNAL_RUN_FIRST, None,
                    (int, ))
    }

    def __init__(self, all_titles, current_title_index):
        super(GstPlayer, self).__init__()
        self.all_titles = all_titles
        self.current_title_index = current_title_index
        self.pipeline = Gst.ElementFactory.make("playbin", "player")
        self.bus = self.pipeline.get_bus()
        self.bus.add_signal_watch()
        self.bus.connect('message', self.on_gstreamer_message)

    def volume_up(self):
        self.pipeline.props.volume += 0.5

    def volume_down(self):
        self.pipeline.props.volume -= 0.5

    def play_next(self):
        self.current_title_index += 1
        if self.current_title_index >= len(self.all_titles):
            self.current_title_index = 0
        self.play()

    def play_prev(self):
        self.current_title_index -= 1
        if self.current_title_index < 0:
            self.current_title_index = len(self.all_titles)-1
        self.play()

    @property
    def title(self):
        return self.all_titles[self.current_title_index]

    def play(self, resume_time=None):
        self.pipeline.set_state(Gst.State.NULL)
        #print("Playing {}".format(self.title))
        self.pipeline.props.uri = 'file://'+self.title
        if resume_time:
            self.pipeline.set_state(Gst.State.PAUSED)
            res = self.pipeline.get_state(10*self.NANO_SEC)
            if not res:
                logging.error("get_state() failed")
            res = self.pipeline.seek_simple(
                Gst.Format.TIME, Gst.SeekFlags.FLUSH | Gst.SeekFlags.KEY_UNIT,
                resume_time)
            if not res:
                logging.error("seek_simple() failed")
        self.say_track_nr()
        self.pipeline.set_state(Gst.State.PLAYING)
        self.emit("playing", self.current_title_index)

    def say_track_nr(self):
        nr_audio = self.current_title_index + 1
        if nr_audio < 20:
            nr_audio = "{}/audio/{}/{}.wav".format(
                BASEDIR, LANGUAGE, nr_audio)
            subprocess.call(["aplay", nr_audio])
        elif nr_audio < 99:
            track = self.current_title_index + 1

            sub_1 = "{}/audio/{}/{}0.wav".format(
                BASEDIR, LANGUAGE, track // 10)
            subprocess.call(["aplay", sub_1])

            sub_2 = "{}/audio/{}/{}.wav".format(
                BASEDIR, LANGUAGE, track % 10)
            subprocess.call(["aplay", sub_2])
        else:
            nr_audio = "{}/audio/{}/too-much.wav".format(BASEDIR, LANGUAGE)
            subprocess.call(["aplay", nr_audio])

    def stop(self):
            self.pipeline.set_state(Gst.State.NULL)
            res = self.pipeline.get_state(10*self.NANO_SEC)

    def on_gstreamer_message(self, bus, msg):
        # print(msg.type)
        if msg.type == Gst.EventType.EOS:
            logging.debug("current title ended")
            self.play_next()


class Controller:

    MARKER_FILE = "current_title"

    def __init__(self):
        self.ui = CursesUI()
        self.ui.connect("key", self.on_key_event)
        self.player = None
        self.mdevice = None
        GObject.timeout_add_seconds(5, self.on_timeout)

    def run(self):
        self.client = GUdev.Client(subsystems=["block"])
        self.client.connect("uevent", self.on_uevent)

        self.find_medium()

        self.mainloop = GObject.MainLoop()
        self.mainloop.run()

    def on_uevent(self, client, action, device):
        if action == "add":
            self.find_medium()
        elif action == "remove":
            self.maybe_unmount(device)

    def maybe_unmount(self, device):
        device = device.get_device_file()
        if device == self.mdevice:
            logging.debug("Stopping {}".format(device))
            self.player.stop()
            subprocess.check_call(["umount", "-l", device])
            self.mount_point = None
            self.mdevice = None

    def maybe_apply_update(self):
        my_name = os.path.basename(sys.argv[0])
        update = os.path.join(self.mount_point, my_name)
        logging.debug("Looking for update in {}".format(update))
        if os.path.exists(update):
            target = "/usr/local/bin/"+my_name
            shutil.copy(update, target)
            os.chmod(target, 0o755)
            os.rename(update, update+".update-done")
            os.execv(sys.argv[0], sys.argv)

    def find_medium(self):
        self.mdevice, self.mount_point = mount_removable_medium(self.client)
        if not self.mount_point:
            return False

        logging.debug("Using '{}'".format(self.mount_point))

        self.maybe_apply_update()

        all_titles = find_all_titles(self.mount_point)
        logging.debug("Found: '{}'".format(all_titles))

        start_from = 0
        resume_title, resume_time = self.find_resume_marker()
        if resume_title:
            logging.debug("Resuming from: {}".format(resume_title))
            try:
                start_from = [f[len(self.mount_point):] 
                              for f in all_titles].index(resume_title)
            except ValueError:
                logging.debug("Can not find '{}'".format(resume_title))
        
        self.ui.set_playlist(all_titles, start_from)
        self.player = GstPlayer(all_titles, start_from)
        self.player.connect("playing", self.on_playing_changed)
        self.player.play(resume_time)

    def on_playing_changed(self, player, track_index):
        self.ui.set_playing(track_index)

    def on_key_event(self, keyboard, key):
        if key == curses.KEY_UP:
            self.player.volume_up()
        elif key == curses.KEY_DOWN:
            self.player.volume_down()
        elif key == curses.KEY_LEFT:
            self.player.play_prev()
        elif key == curses.KEY_RIGHT:
            self.player.play_next()
        elif key == ord("q"):
            self.mainloop.quit()

    def set_resume_marker(self):
        ok, pos = self.player.pipeline.query_position(Gst.Format.TIME)
        if not ok:
            return False
        target = os.path.join(self.mount_point, self.MARKER_FILE)
        with open(target+".new", "w") as fp:
            title = self.player.title[len(self.mount_point):]
            fp.write("{}\n{}\n".format(title, pos))
        os.rename(target+".new", target)
        return True

    def find_resume_marker(self):
        target = os.path.join(self.mount_point, self.MARKER_FILE)
        if os.path.exists(target):
            with open(target) as fp:
                resume_title = os.path.join(
                    self.mount_point, fp.readline().strip())
                resume_time = int(fp.readline().strip())
                return resume_title, resume_time
        return None, None

    def on_timeout(self):
        if self.player:
            self.set_resume_marker()
        return True


def main(*args, **kwargs):
    p = Controller()
    p.run()


if __name__ == "__main__":
    logging.basicConfig(
        level=logging.DEBUG, filename="/var/log/raspi-headless-player2.log")

    # make run from checkout easy
    if os.path.exists("./audio"):
        BASEDIR= "./"

    if "--detect" in sys.argv:
        client = GUdev.Client()
        print "removable: ", find_removable_media(client)
        sys.exit(1)

    res = curses.wrapper(main)
    if not res:
        sys.exit(1)
